{"version":3,"sources":["convex-hull.js","App.js","index.js"],"names":["mod","convexHull","points","a","Chart","width","height","data","useState","ch","setCh","useEffect","then","path","d3","length","moveTo","x","y","i","lineTo","closePath","d","toString","fill","stroke","strokeWidth","opacity","map","key","transform","r","App","setData","n","setN","Array","from","Math","random","t","PI","cos","sin","className","onSubmit","event","preventDefault","target","elements","value","type","name","defaultValue","render","document","getElementById"],"mappings":"sPAAMA,EAAM,6BAECC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKH,EADL,uBAChBC,EADgB,EAChBA,WADgB,kBAEjBA,EAAWC,IAFM,2CAAH,sDCEjBE,EAAQ,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACrBC,mBAAS,IADY,mBAClCC,EADkC,KAC9BC,EAD8B,KASzC,GAPAC,qBAAU,WACI,MAARJ,GACFN,EAAWM,GAAMK,MAAK,SAACH,GACrBC,EAAMD,QAGT,CAACF,IACQ,MAARA,EACF,OAAO,KAET,IAAMM,EAAOC,MACb,GAAIL,EAAGM,OAAS,EAAG,CACjBF,EAAKG,OAAOP,EAAG,GAAGQ,EAAGR,EAAG,GAAGS,GAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAGM,SAAUI,EAC/BN,EAAKO,OAAOX,EAAGU,GAAGF,EAAGR,EAAGU,GAAGD,GAE7BL,EAAKQ,YAEP,OACE,yBAAKhB,MAAOA,EAAOC,OAAQA,GACzB,2BACE,0BACEgB,EAAGT,EAAKU,WACRC,KAAK,QACLC,OAAO,OACPC,YAAY,IACZC,QAAQ,SAGZ,2BACGpB,EAAKqB,KAAI,WAAWT,GAAO,IAAfF,EAAc,EAAdA,EAAGC,EAAW,EAAXA,EACd,OACE,uBAAGW,IAAKV,EAAGW,UAAS,oBAAeb,EAAf,YAAoBC,EAApB,MAClB,4BAAQa,EAAE,IAAIJ,QAAS,YA4EtBK,EAnEH,WAAO,IAAD,EACQxB,mBAAS,MADjB,mBACTD,EADS,KACH0B,EADG,OAEEzB,mBAAS,KAFX,mBAET0B,EAFS,KAENC,EAFM,KAgBhB,OAXAxB,qBAAU,WACR,IAAMJ,EAAO6B,MAAMC,KAAK,CAAEtB,OAAQmB,IAAK,WACrC,IAAMH,EAAI,IAAMO,KAAKC,SACfC,EAAc,EAAVF,KAAKG,GAASH,KAAKC,SAC7B,MAAO,CACLtB,EAAGc,EAAIO,KAAKI,IAAIF,GAAKnC,IACrBa,EAAGa,EAAIO,KAAKK,IAAIH,GAAKlC,QAGzB2B,EAAQ1B,KACP,CAAC2B,EAZU,IACC,MAab,6BACE,6BAASU,UAAU,WACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,qEACA,mIAON,6BAASA,UAAU,WACjB,yBAAKA,UAAU,aACb,6BACE,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBACNZ,GAAMW,EAAME,OAAOC,SAASf,EAAEgB,SAGhC,yBAAKN,UAAU,SACb,2BAAOA,UAAU,SAAjB,oBACA,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVO,KAAK,SACLC,KAAK,IACLC,aAAcnB,QAMxB,6BACE,kBAAC,EAAD,CAAO7B,MAjDH,IAiDiBC,OAhDhB,IAgDgCC,KAAMA,OAIjD,6BAASqC,UAAU,UACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,qBAAb,+BCtGZU,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,c","file":"static/js/main.50965fa3.chunk.js","sourcesContent":["const mod = import(\"convex-hull\");\n\nexport const convexHull = async (points) => {\n  const { convexHull } = await mod;\n  return convexHull(points);\n};\n","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { convexHull } from \"./convex-hull\";\n\nconst Chart = ({ width, height, data }) => {\n  const [ch, setCh] = useState([]);\n  useEffect(() => {\n    if (data != null) {\n      convexHull(data).then((ch) => {\n        setCh(ch);\n      });\n    }\n  }, [data]);\n  if (data == null) {\n    return null;\n  }\n  const path = d3.path();\n  if (ch.length > 0) {\n    path.moveTo(ch[0].x, ch[0].y);\n    for (let i = 1; i < ch.length; ++i) {\n      path.lineTo(ch[i].x, ch[i].y);\n    }\n    path.closePath();\n  }\n  return (\n    <svg width={width} height={height}>\n      <g>\n        <path\n          d={path.toString()}\n          fill=\"green\"\n          stroke=\"#000\"\n          strokeWidth=\"2\"\n          opacity=\"0.5\"\n        />\n      </g>\n      <g>\n        {data.map(({ x, y }, i) => {\n          return (\n            <g key={i} transform={`translate(${x},${y})`}>\n              <circle r=\"3\" opacity={0.8} />\n            </g>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n\nconst App = () => {\n  const [data, setData] = useState(null);\n  const [n, setN] = useState(100);\n  const width = 400;\n  const height = 400;\n  useEffect(() => {\n    const data = Array.from({ length: n }, () => {\n      const r = 180 * Math.random();\n      const t = Math.PI * 2 * Math.random();\n      return {\n        x: r * Math.cos(t) + width / 2,\n        y: r * Math.sin(t) + height / 2,\n      };\n    });\n    setData(data);\n  }, [n, width, height]);\n  return (\n    <div>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"content\">\n            <h1>Convex Hull with Rust and WebAssembly</h1>\n            <p>\n              This is an implementation of Graham scan convex hull finding\n              algorithm with Rust and WebAssembly.\n            </p>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div>\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                setN(+event.target.elements.n.value);\n              }}\n            >\n              <div className=\"field\">\n                <label className=\"label\">Number of points</label>\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"number\"\n                    name=\"n\"\n                    defaultValue={n}\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div>\n            <Chart width={width} height={height} data={data} />\n          </div>\n        </div>\n      </section>\n      <section className=\"footer\">\n        <div className=\"container\">\n          <div className=\"content\">\n            <p className=\"has-text-centered\">&copy; 2020 Yosuke Onoue</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","import \"bulma/css//bulma.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App.js\";\n\nrender(<App />, document.getElementById(\"content\"));\n"],"sourceRoot":""}