{"version":3,"sources":["../convex-hull/pkg/convex_hull_bg.js","../convex-hull/pkg/convex_hull.js"],"names":["cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","takeObject","ret","dropObject","stack_pointer","convexHull","data","Error","addBorrowedObject","__wbindgen_json_parse","arg0","arg1","JSON","parse","__wbindgen_json_serialize","ptr0","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stringify","len0","__wbindgen_string_new","__wbindgen_rethrow"],"mappings":"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","file":"static/js/3.7cd3a0ad.chunk.js","sourcesContent":["import * as wasm from './convex_hull_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* @param {any} data\n* @returns {any}\n*/\nexport function convexHull(data) {\n    try {\n        var ret = wasm.convexHull(addBorrowedObject(data));\n        return takeObject(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n    }\n}\n\nexport const __wbindgen_json_parse = function(arg0, arg1) {\n    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = JSON.stringify(obj === undefined ? null : obj);\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\n","import * as wasm from \"./convex_hull_bg.wasm\";\nexport * from \"./convex_hull_bg.js\";"],"sourceRoot":""}